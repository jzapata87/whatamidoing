{"ast":null,"code":"import _toArray from \"/Users/javierzapata/Developer/whatamidoing/node_modules/@babel/runtime/helpers/esm/toArray\";\nvar _jsxFileName = \"/Users/javierzapata/Developer/whatamidoing/src/User/User.js\";\nimport React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\nimport randomLocation from 'random-location';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState: [],\n      current: \"Nothing\",\n      presences: {}\n    }; // This binding is necessary to make `this` work in the callback\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendGps = this.sendGps.bind(this);\n  }\n\n  joinRoom(data) {\n    if (this.state.channel) {\n      this.state.channel.leave();\n    }\n\n    const socket = this.state.socket;\n    this.setState({\n      data\n    });\n    this.setState({\n      current: data\n    });\n    const channel = socket.channel(\"water_cooler:\".concat(data));\n    this.setState({\n      channel: channel\n    });\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully\" + this.props.usernumber, resp);\n    }).receive(\"error\", resp => {\n      console.log(\"Unable to join\", this.props.usernumber);\n    });\n    channel.on(\"room:\".concat(data, \":new_message\"), payload => {\n      if (payload.name !== this.props.usernumber + \" is \" + this.state.current) {\n        //console.log(payload)\n        console.log(\"user \" + this.props.usernumber + \" got the message\");\n      }\n    });\n    channel.on(\"presence_diff\", response => {\n      let presences = Presence.syncDiff(this.state.presences, response);\n      this.setState({\n        presences: presences\n      });\n      let participants = Presence.list(presences, listBy);\n      this.setState({\n        presenceState: participants\n      });\n    });\n    channel.on(\"presence_state\", response => {\n      let presences = Presence.syncState(this.state.presences, response);\n      console.log(presences, \"inside state presence\");\n      this.setState({\n        presences: presences\n      });\n      let participants = Presence.list(presences, listBy);\n      this.setState({\n        presenceState: participants\n      });\n    }); // let presentUsers = [];\n    // channel.on(\"presence_diff\", (response) => {\n    //   const presentUsers = [];\n    //   console.log(response, \"response\")\n    //   let presences = Presence.syncDiff(this.state.presences, response);\n    //   console.log(presences, \"syncdiff\")\n    //   //let participants = Presence.list({presences})\n    //   Presence.list(presences, (id, { metas: [first] }) => first)\n    //       .map(user => presentUsers.push(user));\n    //   console.log(Presence.list(presences), \"presence list\")\n    //   console.log(presentUsers, \"presentusers\")\n    //   this.setState({presenceState: presentUsers})\n    //   this.setState({presences: presences})\n    // })\n    // channel.on(\"presence_state\", (response) => {\n    //   //const presentUsers = [];\n    //   console.log(response, \"response p_state\")\n    //   console.log(this.state.presences, \"state of presense\")\n    //   let presences = Presence.syncDiff({}, response);\n    //   //console.log(presences, \"syncdiff\")\n    //   // //let participants = Presence.list({presences})\n    //   // Presence.list(presences, (id, { metas: [first] }) => first)\n    //   //     .map(user => presentUsers.push(user));\n    //   // console.log(Presence.list(presences), \"presence list\")\n    //   // console.log(presentUsers, \"presentusers\")\n    //   // this.setState({presenceState: presentUsers})\n    //   // this.setState({presences: presences})\n    // })\n    //let presence = new Presence(channel)\n\n    let listBy = (id, _ref) => {\n      let _ref$metas = _toArray(_ref.metas),\n          first = _ref$metas[0],\n          rest = _ref$metas.slice(1);\n\n      // first.count = rest.length + 1 // count of this user's presences\n      // first.id = id\n      console.log(first, \"first things\");\n      return first;\n    }; // presence.onSync(() => {\n    //   console.log(presence.list(listBy), \"normal lists\")\n    //   this.setState({presenceState: presence.list(listBy)})\n    // })\n    //let presences = {};\n    // channel.on('presence_diff', (diff) => {\n    //   presences = Presence.syncDiff(presences, diff);\n    //   this.setState({presences});\n    // });\n    // channel.on('presence_state', (state) => {\n    //   presences = Presence.syncDiff(presences, state);\n    //   this.setState({presenceState: presences});\n    // });\n    //channel.on('presence_state', presenceState => this.setState({presenceState}))\n    //let presence = new Presence(channel)\n    //presence.onSync(() => this.setState({presenceState: presence.state}))\n    //channel.push('users', {})\n\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n      params: {\n        user_id: \"user #\".concat(this.props.usernumber)\n      }\n    });\n    this.setState({\n      socket\n    });\n  }\n\n  sendGps() {\n    const P = {\n      latitude: 30.240006,\n      longitude: -97.720439\n    };\n    const R = 1000; // meters\n    //const randomPoint = randomLocation.randomCirclePoint(P, R)\n\n    setInterval(console.log(randomLocation.randomCirclePoint(P, R)), 5000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"User\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(ShowCurrentActivity, {\n      current: this.state.current,\n      user: this.props.usernumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(ChooseActivity, {\n      join: this.joinRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(ShowSimilarUsers, {\n      users: this.state.presenceState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.sendGps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Send GPS\"));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/javierzapata/Developer/whatamidoing/src/User/User.js"],"names":["React","ChooseActivity","ShowCurrentActivity","ShowSimilarUsers","Socket","Presence","randomLocation","User","Component","constructor","props","state","channel","socket","presenceState","current","presences","joinRoom","bind","sendGps","data","leave","setState","connect","join","receive","resp","console","log","usernumber","on","payload","name","response","syncDiff","participants","list","listBy","syncState","id","metas","first","rest","componentDidMount","params","user_id","P","latitude","longitude","R","setInterval","randomCirclePoint","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\nimport randomLocation from 'random-location'\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState:[],\n      current: \"Nothing\",\n      presences: {},\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendGps = this.sendGps.bind(this);\n  }\n\n  joinRoom(data) {\n    if (this.state.channel) {\n      this.state.channel.leave()\n    }\n    const { socket } = this.state;\n    this.setState({data})\n    this.setState({current: data})\n    const channel = socket.channel(`water_cooler:${data}`);\n    this.setState({channel: channel})\n    socket.connect();\n    channel.join()\n    .receive(\"ok\", resp => {\n      console.log(\"Joined successfully\" + this.props.usernumber, resp)\n    })\n    .receive(\"error\", resp => { console.log(\"Unable to join\", this.props.usernumber) })\n\n    channel.on(`room:${data}:new_message`, payload => {\n        if (payload.name !== this.props.usernumber + \" is \" + this.state.current){\n          //console.log(payload)\n          console.log(\"user \"+ this.props.usernumber + \" got the message\")\n        }\n\n    })\n\n\n    channel.on(\"presence_diff\", (response) => {\n      let presences = Presence.syncDiff(this.state.presences, response);\n      this.setState({presences: presences})\n      let participants = Presence.list(presences, listBy)\n      this.setState({presenceState: participants})\n    })\n\n    channel.on(\"presence_state\", (response) => {\n      let presences = Presence.syncState(this.state.presences, response);\n      console.log(presences, \"inside state presence\")\n      this.setState({presences: presences})\n      let participants = Presence.list(presences, listBy)\n      this.setState({presenceState: participants})\n    })\n\n\n    // let presentUsers = [];\n    // channel.on(\"presence_diff\", (response) => {\n    //   const presentUsers = [];\n    //   console.log(response, \"response\")\n    //   let presences = Presence.syncDiff(this.state.presences, response);\n    //   console.log(presences, \"syncdiff\")\n    //   //let participants = Presence.list({presences})\n    //   Presence.list(presences, (id, { metas: [first] }) => first)\n    //       .map(user => presentUsers.push(user));\n    //   console.log(Presence.list(presences), \"presence list\")\n    //   console.log(presentUsers, \"presentusers\")\n    //   this.setState({presenceState: presentUsers})\n    //   this.setState({presences: presences})\n    // })\n\n\n\n    // channel.on(\"presence_state\", (response) => {\n    //   //const presentUsers = [];\n    //   console.log(response, \"response p_state\")\n    //   console.log(this.state.presences, \"state of presense\")\n    //   let presences = Presence.syncDiff({}, response);\n    //   //console.log(presences, \"syncdiff\")\n    //   // //let participants = Presence.list({presences})\n    //   // Presence.list(presences, (id, { metas: [first] }) => first)\n    //   //     .map(user => presentUsers.push(user));\n    //   // console.log(Presence.list(presences), \"presence list\")\n    //   // console.log(presentUsers, \"presentusers\")\n    //   // this.setState({presenceState: presentUsers})\n    //   // this.setState({presences: presences})\n    // })\n\n   //let presence = new Presence(channel)\n\n\n\n\n  let listBy = (id, {metas: [first, ...rest]}) => {\n    // first.count = rest.length + 1 // count of this user's presences\n    // first.id = id\n    console.log(first, \"first things\")\n    return first\n  }\n\n   // presence.onSync(() => {\n   //   console.log(presence.list(listBy), \"normal lists\")\n   //   this.setState({presenceState: presence.list(listBy)})\n   // })\n\n\n\n    //let presences = {};\n\n    // channel.on('presence_diff', (diff) => {\n    //   presences = Presence.syncDiff(presences, diff);\n    //   this.setState({presences});\n    // });\n\n    // channel.on('presence_state', (state) => {\n    //   presences = Presence.syncDiff(presences, state);\n    //   this.setState({presenceState: presences});\n    // });\n\n    //channel.on('presence_state', presenceState => this.setState({presenceState}))\n\n    //let presence = new Presence(channel)\n\n    //presence.onSync(() => this.setState({presenceState: presence.state}))\n\n\n    //channel.push('users', {})\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n    params: {user_id: `user #${this.props.usernumber}`}\n    });\n    this.setState({socket})\n  }\n\n  sendGps() {\n    const P = {\n      latitude: 30.240006,\n      longitude: -97.720439\n    }\n\n    const R = 1000 // meters\n\n    //const randomPoint = randomLocation.randomCirclePoint(P, R)\n    setInterval(\n      console.log(randomLocation.randomCirclePoint(P, R)),\n      5000\n    );\n  }\n\n  render() {\n\n    return (\n      <div className=\"User\">\n        <ShowCurrentActivity current={this.state.current} user={this.props.usernumber}/>\n        <ChooseActivity join={this.joinRoom}/>\n        <ShowSimilarUsers users={this.state.presenceState}/>\n        <button onClick={this.sendGps}>\n          Send GPS\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}