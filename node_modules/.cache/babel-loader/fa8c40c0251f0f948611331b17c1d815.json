{"ast":null,"code":"import _toArray from \"/Users/javierzapata/Developer/whatamidoing/node_modules/@babel/runtime/helpers/esm/toArray\";\nvar _jsxFileName = \"/Users/javierzapata/Developer/whatamidoing/src/User/User.js\";\nimport React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState: [],\n      current: \"Nothing\",\n      presences: {}\n    }; // This binding is necessary to make `this` work in the callback\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  sendMessage() {\n    const channel = this.state.channel;\n    channel.push('shout', {\n      name: this.props.usernumber + \" is \" + this.state.current\n    });\n  }\n\n  joinRoom(data) {\n    if (this.state.channel) {\n      this.state.channel.leave();\n    }\n\n    const socket = this.state.socket;\n    this.setState({\n      data\n    });\n    this.setState({\n      current: data\n    });\n    const channel = socket.channel(\"water_cooler:\".concat(data));\n    this.setState({\n      channel: channel\n    });\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully\" + this.props.usernumber, resp);\n    }).receive(\"error\", resp => {\n      console.log(\"Unable to join\", this.props.usernumber);\n    });\n    channel.on(\"room:\".concat(data, \":new_message\"), payload => {\n      if (payload.name !== this.props.usernumber + \" is \" + this.state.current) {\n        //console.log(payload)\n        console.log(\"user \" + this.props.usernumber + \" got the message\");\n      }\n    });\n    channel.on(\"presence_diff\", response => {\n      let presences = Presence.syncDiff(this.state.presences, response); //this.setState({presences: presences})\n\n      let participants = Presence.list(presences, listBy);\n      this.setState({\n        presenceState: participants\n      });\n    });\n    channel.on(\"presence_state\", response => {\n      let presences = Presence.syncState(this.state.presences, response);\n      console.log(presences, \"inside state presence\"); //this.setState({presences: presences})\n\n      let participants = Presence.list(presences, listBy);\n      this.setState({\n        presenceState: participants\n      });\n    }); // let presentUsers = [];\n    // channel.on(\"presence_diff\", (response) => {\n    //   const presentUsers = [];\n    //   console.log(response, \"response\")\n    //   let presences = Presence.syncDiff(this.state.presences, response);\n    //   console.log(presences, \"syncdiff\")\n    //   //let participants = Presence.list({presences})\n    //   Presence.list(presences, (id, { metas: [first] }) => first)\n    //       .map(user => presentUsers.push(user));\n    //   console.log(Presence.list(presences), \"presence list\")\n    //   console.log(presentUsers, \"presentusers\")\n    //   this.setState({presenceState: presentUsers})\n    //   this.setState({presences: presences})\n    // })\n    // channel.on(\"presence_state\", (response) => {\n    //   //const presentUsers = [];\n    //   console.log(response, \"response p_state\")\n    //   console.log(this.state.presences, \"state of presense\")\n    //   let presences = Presence.syncDiff({}, response);\n    //   //console.log(presences, \"syncdiff\")\n    //   // //let participants = Presence.list({presences})\n    //   // Presence.list(presences, (id, { metas: [first] }) => first)\n    //   //     .map(user => presentUsers.push(user));\n    //   // console.log(Presence.list(presences), \"presence list\")\n    //   // console.log(presentUsers, \"presentusers\")\n    //   // this.setState({presenceState: presentUsers})\n    //   // this.setState({presences: presences})\n    // })\n    //let presence = new Presence(channel)\n\n    let listBy = (id, _ref) => {\n      let _ref$metas = _toArray(_ref.metas),\n          first = _ref$metas[0],\n          rest = _ref$metas.slice(1);\n\n      // first.count = rest.length + 1 // count of this user's presences\n      // first.id = id\n      console.log(first, \"first things\");\n      return first;\n    }; // presence.onSync(() => {\n    //   console.log(presence.list(listBy), \"normal lists\")\n    //   this.setState({presenceState: presence.list(listBy)})\n    // })\n    //let presences = {};\n    // channel.on('presence_diff', (diff) => {\n    //   presences = Presence.syncDiff(presences, diff);\n    //   this.setState({presences});\n    // });\n    // channel.on('presence_state', (state) => {\n    //   presences = Presence.syncDiff(presences, state);\n    //   this.setState({presenceState: presences});\n    // });\n    //channel.on('presence_state', presenceState => this.setState({presenceState}))\n    //let presence = new Presence(channel)\n    //presence.onSync(() => this.setState({presenceState: presence.state}))\n    //channel.push('users', {})\n\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n      params: {\n        user_id: \"user #\".concat(this.props.usernumber)\n      }\n    });\n    this.setState({\n      socket\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"User\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(ShowCurrentActivity, {\n      current: this.state.current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(ChooseActivity, {\n      join: this.joinRoom,\n      message: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(ShowSimilarUsers, {\n      users: this.state.presenceState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/javierzapata/Developer/whatamidoing/src/User/User.js"],"names":["React","ChooseActivity","ShowCurrentActivity","ShowSimilarUsers","Socket","Presence","User","Component","constructor","props","state","channel","socket","presenceState","current","presences","joinRoom","bind","sendMessage","push","name","usernumber","data","leave","setState","connect","join","receive","resp","console","log","on","payload","response","syncDiff","participants","list","listBy","syncState","id","metas","first","rest","componentDidMount","params","user_id","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState:[],\n      current: \"Nothing\",\n      presences: {},\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  sendMessage() {\n    const { channel } = this.state;\n    channel.push('shout', {name: this.props.usernumber + \" is \" + this.state.current})\n  }\n\n  joinRoom(data) {\n    if (this.state.channel) {\n      this.state.channel.leave()\n    }\n    const { socket } = this.state;\n    this.setState({data})\n    this.setState({current: data})\n    const channel = socket.channel(`water_cooler:${data}`);\n    this.setState({channel: channel})\n    socket.connect();\n    channel.join()\n    .receive(\"ok\", resp => {\n      console.log(\"Joined successfully\" + this.props.usernumber, resp)\n    })\n    .receive(\"error\", resp => { console.log(\"Unable to join\", this.props.usernumber) })\n\n    channel.on(`room:${data}:new_message`, payload => {\n        if (payload.name !== this.props.usernumber + \" is \" + this.state.current){\n          //console.log(payload)\n          console.log(\"user \"+ this.props.usernumber + \" got the message\")\n        }\n\n    })\n\n\n    channel.on(\"presence_diff\", (response) => {\n      let presences = Presence.syncDiff(this.state.presences, response);\n      //this.setState({presences: presences})\n      let participants = Presence.list(presences, listBy)\n      this.setState({presenceState: participants})\n    })\n\n    channel.on(\"presence_state\", (response) => {\n\n\n        let presences = Presence.syncState(this.state.presences, response);\n        console.log(presences, \"inside state presence\")\n        //this.setState({presences: presences})\n        let participants = Presence.list(presences, listBy)\n        this.setState({presenceState: participants})\n\n\n    })\n\n\n    // let presentUsers = [];\n    // channel.on(\"presence_diff\", (response) => {\n    //   const presentUsers = [];\n    //   console.log(response, \"response\")\n    //   let presences = Presence.syncDiff(this.state.presences, response);\n    //   console.log(presences, \"syncdiff\")\n    //   //let participants = Presence.list({presences})\n    //   Presence.list(presences, (id, { metas: [first] }) => first)\n    //       .map(user => presentUsers.push(user));\n    //   console.log(Presence.list(presences), \"presence list\")\n    //   console.log(presentUsers, \"presentusers\")\n    //   this.setState({presenceState: presentUsers})\n    //   this.setState({presences: presences})\n    // })\n\n\n\n    // channel.on(\"presence_state\", (response) => {\n    //   //const presentUsers = [];\n    //   console.log(response, \"response p_state\")\n    //   console.log(this.state.presences, \"state of presense\")\n    //   let presences = Presence.syncDiff({}, response);\n    //   //console.log(presences, \"syncdiff\")\n    //   // //let participants = Presence.list({presences})\n    //   // Presence.list(presences, (id, { metas: [first] }) => first)\n    //   //     .map(user => presentUsers.push(user));\n    //   // console.log(Presence.list(presences), \"presence list\")\n    //   // console.log(presentUsers, \"presentusers\")\n    //   // this.setState({presenceState: presentUsers})\n    //   // this.setState({presences: presences})\n    // })\n\n   //let presence = new Presence(channel)\n\n\n\n\n  let listBy = (id, {metas: [first, ...rest]}) => {\n    // first.count = rest.length + 1 // count of this user's presences\n    // first.id = id\n    console.log(first, \"first things\")\n    return first\n  }\n\n   // presence.onSync(() => {\n   //   console.log(presence.list(listBy), \"normal lists\")\n   //   this.setState({presenceState: presence.list(listBy)})\n   // })\n\n\n\n    //let presences = {};\n\n    // channel.on('presence_diff', (diff) => {\n    //   presences = Presence.syncDiff(presences, diff);\n    //   this.setState({presences});\n    // });\n\n    // channel.on('presence_state', (state) => {\n    //   presences = Presence.syncDiff(presences, state);\n    //   this.setState({presenceState: presences});\n    // });\n\n    //channel.on('presence_state', presenceState => this.setState({presenceState}))\n\n    //let presence = new Presence(channel)\n\n    //presence.onSync(() => this.setState({presenceState: presence.state}))\n\n\n    //channel.push('users', {})\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n    params: {user_id: `user #${this.props.usernumber}`}\n    });\n    this.setState({socket})\n  }\n\n  render() {\n\n    return (\n      <div className=\"User\">\n        <ShowCurrentActivity current={this.state.current}/>\n        <ChooseActivity join={this.joinRoom} message={this.sendMessage}/>\n        <ShowSimilarUsers users={this.state.presenceState}/>\n      </div>\n    );\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}