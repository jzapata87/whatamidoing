{"ast":null,"code":"var _jsxFileName = \"/Users/javierzapata/Developer/whatamidoing/src/Map/Main.js\";\nimport React, { Component, Fragment } from 'react';\nimport isEmpty from 'lodash.isempty'; // components:\n\nimport Marker from './Marker'; // examples:\n\nimport GoogleMap from './GoogleMap';\nimport SOMEWHERE_IN_AUSTIN from './austin'; // Return map bounds based on list of places\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n  places.forEach(place => {\n    bounds.extend(new maps.LatLng(place.geometry.location.lat, place.geometry.location.lng));\n  });\n  return bounds;\n}; // Re-center map when resizing the window\n\n\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n}; // Fit map to its bounds after the api is loaded\n\n\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places); // Fit map to bounds\n\n  map.fitBounds(bounds); // Bind the resize listener\n\n  bindResizeListener(map, maps, bounds);\n};\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=30.240006,-97.720439&radius=1500&type=restaurant&keyword=cruise&key=AIzaSyAIFqYRABatpGZdmVjjg4CJzKnQy86OFsg', {\n      mode: 'cors'\n    }).then(response => response.json()).then(data => this.setState({\n      places: data.results\n    }));\n  }\n\n  render() {\n    const places = this.state.places;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, !isEmpty(places) && React.createElement(GoogleMap, {\n      defaultZoom: 10,\n      defaultCenter: SOMEWHERE_IN_AUSTIN,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => apiIsLoaded(map, maps, places),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, places.map(place => React.createElement(Marker, {\n      key: place.id,\n      text: place.name,\n      lat: place.geometry.location.lat,\n      lng: place.geometry.location.lng,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/javierzapata/Developer/whatamidoing/src/Map/Main.js"],"names":["React","Component","Fragment","isEmpty","Marker","GoogleMap","SOMEWHERE_IN_AUSTIN","getMapBounds","map","maps","places","bounds","LatLngBounds","forEach","place","extend","LatLng","geometry","location","lat","lng","bindResizeListener","event","addDomListenerOnce","addDomListener","window","fitBounds","apiIsLoaded","Main","constructor","props","state","componentDidMount","fetch","mode","then","response","json","data","setState","results","render","id","name"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport isEmpty from 'lodash.isempty';\n\n// components:\nimport Marker from './Marker';\n\n// examples:\nimport GoogleMap from './GoogleMap';\n\nimport SOMEWHERE_IN_AUSTIN from './austin';\n\n// Return map bounds based on list of places\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n\n  places.forEach((place) => {\n    bounds.extend(new maps.LatLng(\n      place.geometry.location.lat,\n      place.geometry.location.lng,\n    ));\n  });\n  return bounds;\n};\n\n// Re-center map when resizing the window\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n};\n\n// Fit map to its bounds after the api is loaded\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places);\n  // Fit map to bounds\n  map.fitBounds(bounds);\n  // Bind the resize listener\n  bindResizeListener(map, maps, bounds);\n};\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      places: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=30.240006,-97.720439&radius=1500&type=restaurant&keyword=cruise&key=AIzaSyAIFqYRABatpGZdmVjjg4CJzKnQy86OFsg',{mode: 'cors'})\n      .then(response => response.json())\n      .then(data => this.setState({ places: data.results }));\n  }\n\n  render() {\n    const { places } = this.state;\n    return (\n      <Fragment>\n        {!isEmpty(places) && (\n          <GoogleMap\n            defaultZoom={10}\n            defaultCenter={SOMEWHERE_IN_AUSTIN}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, places)}\n          >\n            {places.map(place => (\n              <Marker\n                key={place.id}\n                text={place.name}\n                lat={place.geometry.location.lat}\n                lng={place.geometry.location.lng}\n              />\n            ))}\n          </GoogleMap>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}