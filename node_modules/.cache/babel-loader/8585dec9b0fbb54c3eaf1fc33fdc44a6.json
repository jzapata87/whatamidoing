{"ast":null,"code":"\"use strict\";\n\nvar EARTH_RADIUS = 6371000; // meters\n\nvar DEG_TO_RAD = Math.PI / 180.0;\nvar THREE_PI = Math.PI * 3;\nvar TWO_PI = Math.PI * 2;\n\nvar toRadians = function toRadians(deg) {\n  return deg * DEG_TO_RAD;\n};\n\nvar toDegrees = function toDegrees(rad) {\n  return rad / DEG_TO_RAD;\n};\n/*\nGiven a centerPoint C and a radius R, returns a random point that is on the\ncircumference defined by C and R.\n\ncenterPoint C is of type { latitude: A, longitude: B }\nWhere -90 <= A <= 90 and -180 <= B <= 180.\n\nradius R is in meters.\n\nBased on: http://www.movable-type.co.uk/scripts/latlong.html#destPoint\n*/\n\n\nvar randomCircumferencePoint = function randomCircumferencePoint(centerPoint, radius) {\n  var sinLat = Math.sin(toRadians(centerPoint.latitude));\n  var cosLat = Math.cos(toRadians(centerPoint.latitude)); // Random bearing (direction out 360 degrees)\n\n  var bearing = Math.random() * TWO_PI;\n  var sinBearing = Math.sin(bearing);\n  var cosBearing = Math.cos(bearing); // Theta is the approximated angular distance\n\n  var theta = radius / EARTH_RADIUS;\n  var sinTheta = Math.sin(theta);\n  var cosTheta = Math.cos(theta);\n  var rLatitude = void 0,\n      rLongitude = void 0;\n  rLatitude = Math.asin(sinLat * cosTheta + cosLat * sinTheta * cosBearing);\n  rLongitude = toRadians(centerPoint.longitude) + Math.atan2(sinBearing * sinTheta * cosLat, cosTheta - sinLat * Math.sin(rLatitude)); // Normalize longitude L such that -PI < L < +PI\n\n  rLongitude = (rLongitude + THREE_PI) % TWO_PI - Math.PI;\n  return {\n    latitude: toDegrees(rLatitude),\n    longitude: toDegrees(rLongitude)\n  };\n};\n/*\nGiven a centerPoint C and a radius R, returns a random point that is inside\nthe circle defined by C and R.\n\ncenterPoint C is of type { latitude: A, longitude: B }\nWhere -90 <= A <= 90 and -180 <= B <= 180.\n\nradius R is in meters.\n*/\n\n\nvar randomCirclePoint = function randomCirclePoint(centerPoint, radius) {\n  // http://mathworld.wolfram.com/DiskPointPicking.html\n  return randomCircumferencePoint(centerPoint, Math.sqrt(Math.random()) * radius);\n};\n/*\nReturns the distance in meters between two points P1 and P2. \n\nP1 and P2 are of type { latitude: A, longitude: B }\nWhere -90 <= A <= 90 and -180 <= B <= 180.\n\nBasically it is the Haversine distance function.\nBased on: http://www.movable-type.co.uk/scripts/latlong.html\n*/\n\n\nvar distance = function distance(P1, P2) {\n  var rP1 = {\n    latitude: toRadians(P1.latitude),\n    longitude: toRadians(P1.longitude)\n  };\n  var rP2 = {\n    latitude: toRadians(P2.latitude),\n    longitude: toRadians(P2.longitude)\n  };\n  var D = {\n    latitude: Math.sin((rP2.latitude - rP1.latitude) / 2),\n    longitude: Math.sin((rP2.longitude - rP1.longitude) / 2)\n  };\n  var A = D.latitude * D.latitude + D.longitude * D.longitude * Math.cos(rP1.latitude) * Math.cos(rP2.latitude);\n  var C = 2 * Math.atan2(Math.sqrt(A), Math.sqrt(1 - A));\n  return EARTH_RADIUS * C;\n};\n\nvar haversine = distance;\nmodule.exports = {\n  distance: distance,\n  haversine: haversine,\n  randomCircumferencePoint: randomCircumferencePoint,\n  randomCirclePoint: randomCirclePoint\n};","map":null,"metadata":{},"sourceType":"script"}