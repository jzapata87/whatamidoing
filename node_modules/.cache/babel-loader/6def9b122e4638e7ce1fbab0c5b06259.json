{"ast":null,"code":"import _toArray from \"/Users/javierzapata/Desktop/whatamidoing/node_modules/@babel/runtime/helpers/esm/toArray\";\nvar _jsxFileName = \"/Users/javierzapata/Desktop/whatamidoing/src/User/User.js\";\nimport React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\nimport randomLocation from 'random-location';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState: [],\n      current: \"Nothing\",\n      presences: {}\n    }; // This binding is necessary to make `this` work in the callback\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendGps = this.sendGps.bind(this);\n    this.message = this.message.bind(this);\n  }\n\n  joinRoom(data) {\n    console.log(data, 'this is data');\n    console.log(\"I am running again for some reason\");\n\n    if (this.state.channel) {\n      this.state.channel.leave();\n    }\n\n    const socket = this.state.socket;\n    this.setState({\n      current: data\n    });\n    const channel = socket.channel(\"water_cooler:\".concat(data));\n    this.setState({\n      channel: channel\n    });\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully????\" + this.props.usernumber, resp);\n    }).receive(\"error\", resp => {\n      console.log(\"Unable to join\", this.props.usernumber, resp);\n    }); ////// this is needed if you are recieving messages from other \"users\"\n    // channel.on(`room:${data}:new_message`, payload => {\n    //     if (payload.name !== this.props.usernumber + \" is \" + this.state.current){\n    //       //console.log(payload)\n    //       console.log(\"user \"+ this.props.usernumber + \" got the message\")\n    //     }\n    //\n    // })\n\n    channel.on(\"presence_diff\", response => {\n      let presences = Presence.syncDiff(this.state.presences, response);\n      this.setState({\n        presences: presences\n      });\n      let participants = Presence.list(presences, listBy);\n      this.setState({\n        presenceState: participants\n      });\n    });\n    channel.on(\"presence_state\", response => {\n      let presences = Presence.syncState(this.state.presences, response);\n      this.setState({\n        presences: presences\n      });\n      let participants = Presence.list(presences, listBy);\n      this.setState({\n        presenceState: participants\n      });\n    });\n\n    let listBy = (id, _ref) => {\n      let _ref$metas = _toArray(_ref.metas),\n          first = _ref$metas[0],\n          rest = _ref$metas.slice(1);\n\n      // first.count = rest.length + 1 // count of this user's presences\n      // first.id = id\n      return first;\n    };\n  }\n\n  message(data) {\n    this.state.channel.push(\"shout\", {\n      data,\n      user: this.props.usernumber\n    }).receive(\"ok\", resp => {\n      console.log(resp.response, \" this is the response\");\n    }).receive(\"error\", resp => {\n      console.log(\"error\", resp);\n    });\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://phoenixmaybackend.com/socket\", {\n      params: {\n        user_id: \"user #\".concat(this.props.usernumber)\n      }\n    });\n    this.setState({\n      socket\n    });\n  }\n\n  sendGps() {\n    const P = {\n      latitude: 30.240006,\n      longitude: -97.720439\n    };\n    const R = 1000; // meters\n\n    setInterval(() => this.message(randomLocation.randomCirclePoint(P, R)), 5000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"User\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(ShowCurrentActivity, {\n      current: this.state.current,\n      user: this.props.usernumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(ChooseActivity, {\n      join: this.joinRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(ShowSimilarUsers, {\n      users: this.state.presenceState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Show my location\"), React.createElement(\"button\", {\n      onClick: this.sendGps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Send GPS\"));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/javierzapata/Desktop/whatamidoing/src/User/User.js"],"names":["React","ChooseActivity","ShowCurrentActivity","ShowSimilarUsers","Socket","Presence","randomLocation","User","Component","constructor","props","state","channel","socket","presenceState","current","presences","joinRoom","bind","sendGps","message","data","console","log","leave","setState","connect","join","receive","resp","usernumber","on","response","syncDiff","participants","list","listBy","syncState","id","metas","first","rest","push","user","componentDidMount","params","user_id","P","latitude","longitude","R","setInterval","randomCirclePoint","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\nimport randomLocation from 'random-location'\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState:[],\n      current: \"Nothing\",\n      presences: {},\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendGps = this.sendGps.bind(this);\n    this.message = this.message.bind(this);\n  }\n\n  joinRoom(data) {\n    console.log(data, 'this is data')\n    console.log(\"I am running again for some reason\")\n    if (this.state.channel) {\n      this.state.channel.leave()\n    }\n    const { socket } = this.state;\n    this.setState({current: data})\n    const channel = socket.channel(`water_cooler:${data}`);\n    this.setState({channel: channel})\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully????\" + this.props.usernumber, resp)\n      })\n      .receive(\"error\", resp => { console.log(\"Unable to join\", this.props.usernumber, resp) })\n\n    ////// this is needed if you are recieving messages from other \"users\"\n    // channel.on(`room:${data}:new_message`, payload => {\n    //     if (payload.name !== this.props.usernumber + \" is \" + this.state.current){\n    //       //console.log(payload)\n    //       console.log(\"user \"+ this.props.usernumber + \" got the message\")\n    //     }\n    //\n    // })\n\n    channel.on(\"presence_diff\", (response) => {\n      let presences = Presence.syncDiff(this.state.presences, response);\n      this.setState({presences: presences})\n      let participants = Presence.list(presences, listBy)\n      this.setState({presenceState: participants})\n    })\n\n    channel.on(\"presence_state\", (response) => {\n      let presences = Presence.syncState(this.state.presences, response);\n      this.setState({presences: presences})\n      let participants = Presence.list(presences, listBy)\n      this.setState({presenceState: participants})\n    })\n\n    let listBy = (id, {metas: [first, ...rest]}) => {\n      // first.count = rest.length + 1 // count of this user's presences\n      // first.id = id\n\n      return first\n    }\n  }\n\n  message(data) {\n    this.state.channel.push(\"shout\", {data, user: this.props.usernumber})\n      .receive(\"ok\", resp => {\n        console.log(resp.response, \" this is the response\")\n      })\n      .receive(\"error\", resp => { console.log(\"error\", resp) })\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://phoenixmaybackend.com/socket\", {\n    params: {user_id: `user #${this.props.usernumber}`}\n    });\n    this.setState({socket})\n  }\n\n  sendGps() {\n    const P = {\n      latitude: 30.240006,\n      longitude: -97.720439\n    }\n\n    const R = 1000 // meters\n\n    setInterval(\n      () => this.message(randomLocation.randomCirclePoint(P, R)),\n      5000\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"User\">\n        <ShowCurrentActivity current={this.state.current} user={this.props.usernumber}/>\n        <ChooseActivity join={this.joinRoom}/>\n        <ShowSimilarUsers users={this.state.presenceState}/>\n        <hr/>\n        <h5>Show my location</h5>\n        <button onClick={this.sendGps}>\n          Send GPS\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}