{"ast":null,"code":"import _toArray from \"/Users/javierzapata/Developer/whatamidoing/node_modules/@babel/runtime/helpers/esm/toArray\";\nvar _jsxFileName = \"/Users/javierzapata/Developer/whatamidoing/src/User/User.js\";\nimport React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState: {},\n      current: \"Nothing\"\n    }; // This binding is necessary to make `this` work in the callback\n\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  sendMessage() {\n    const channel = this.state.channel;\n    channel.push('shout', {\n      name: this.props.usernumber + \" is \" + this.state.current\n    });\n  }\n\n  joinRoom(data) {\n    if (this.state.channel) {\n      this.state.channel.leave();\n    }\n\n    const socket = this.state.socket;\n    this.setState({\n      data\n    });\n    this.setState({\n      current: data\n    });\n    const channel = socket.channel(\"water_cooler:\".concat(data));\n    this.setState({\n      channel: channel\n    });\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully\" + this.props.usernumber, resp);\n    }).receive(\"error\", resp => {\n      console.log(\"Unable to join\", this.props.usernumber);\n    });\n    channel.on(\"room:\".concat(data, \":new_message\"), payload => {\n      if (payload.name !== this.props.usernumber + \" is \" + this.state.current) {\n        //console.log(payload)\n        console.log(\"user \" + this.props.usernumber + \" got the message\");\n      }\n    });\n    let presence = new Presence(channel); // detect if user has joined for the 1st time or from another tab/device\n    // presence.onJoin((id, current, newPres) => {\n    //   if(!current){\n    //     console.log(\"user has entered for the first time \" + id + \" \" + newPres)\n    //   } else {\n    //     console.log(\"user additional presence\", newPres)\n    //   }\n    // })\n    // detect if user has left from all tabs/devices, or is still present\n    // presence.onLeave((id, current, leftPres) => {\n    //   if(current.metas.length === 0){\n    //     console.log(\"user has left from all devices\", leftPres)\n    //   } else {\n    //     console.log(\"user left from a device\", leftPres)\n    //   }\n    // })\n    // receive presence data from server\n\n    let listBy = (id, _ref) => {\n      let _ref$metas = _toArray(_ref.metas),\n          first = _ref$metas[0],\n          rest = _ref$metas.slice(1);\n\n      first.count = rest.length + 1; // count of this user's presences\n\n      first.id = id;\n      return first;\n    };\n\n    presence.onSync(() => {\n      console.log(presence.list(listBy).map(user => presentUsers.push(user)));\n      this.setState({\n        presenceState: presence.list(listBy)\n      });\n    }); //let presences = {};\n    // channel.on('presence_diff', (diff) => {\n    //   presences = Presence.syncDiff(presences, diff);\n    //   this.setState({presences});\n    // });\n    // channel.on('presence_state', (state) => {\n    //   presences = Presence.syncDiff(presences, state);\n    //   this.setState({presenceState: presences});\n    // });\n    //channel.on('presence_state', presenceState => this.setState({presenceState}))\n    //let presence = new Presence(channel)\n    //presence.onSync(() => this.setState({presenceState: presence.state}))\n    //channel.push('users', {})\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n      params: {\n        user_id: \"user #\".concat(this.props.usernumber)\n      }\n    });\n    this.setState({\n      socket\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"User\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(ShowCurrentActivity, {\n      current: this.state.current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(ChooseActivity, {\n      join: this.joinRoom,\n      message: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(ShowSimilarUsers, {\n      users: this.state.presenceState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/javierzapata/Developer/whatamidoing/src/User/User.js"],"names":["React","ChooseActivity","ShowCurrentActivity","ShowSimilarUsers","Socket","Presence","User","Component","constructor","props","state","channel","socket","presenceState","current","joinRoom","bind","sendMessage","push","name","usernumber","data","leave","setState","connect","join","receive","resp","console","log","on","payload","presence","listBy","id","metas","first","rest","count","length","onSync","list","map","user","presentUsers","componentDidMount","params","user_id","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChooseActivity from './ChooseActivity';\nimport ShowCurrentActivity from './ShowCurrentActivity';\nimport ShowSimilarUsers from './ShowSimilarUsers';\nimport { Socket } from 'phoenix-socket';\nimport { Presence } from '../phoenix.js';\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: null,\n      socket: null,\n      presenceState:{},\n      current: \"Nothing\"\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.joinRoom = this.joinRoom.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  sendMessage() {\n    const { channel } = this.state;\n    channel.push('shout', {name: this.props.usernumber + \" is \" + this.state.current})\n  }\n\n  joinRoom(data) {\n    if (this.state.channel) {\n      this.state.channel.leave()\n    }\n    const { socket } = this.state;\n    this.setState({data})\n    this.setState({current: data})\n    const channel = socket.channel(`water_cooler:${data}`);\n    this.setState({channel: channel})\n    socket.connect();\n    channel.join()\n    .receive(\"ok\", resp => {\n      console.log(\"Joined successfully\" + this.props.usernumber, resp)\n    })\n    .receive(\"error\", resp => { console.log(\"Unable to join\", this.props.usernumber) })\n\n    channel.on(`room:${data}:new_message`, payload => {\n        if (payload.name !== this.props.usernumber + \" is \" + this.state.current){\n          //console.log(payload)\n          console.log(\"user \"+ this.props.usernumber + \" got the message\")\n        }\n\n    })\n\n   let presence = new Presence(channel)\n\n   // detect if user has joined for the 1st time or from another tab/device\n   // presence.onJoin((id, current, newPres) => {\n   //   if(!current){\n   //     console.log(\"user has entered for the first time \" + id + \" \" + newPres)\n   //   } else {\n   //     console.log(\"user additional presence\", newPres)\n   //   }\n   // })\n\n   // detect if user has left from all tabs/devices, or is still present\n   // presence.onLeave((id, current, leftPres) => {\n   //   if(current.metas.length === 0){\n   //     console.log(\"user has left from all devices\", leftPres)\n   //   } else {\n   //     console.log(\"user left from a device\", leftPres)\n   //   }\n   // })\n   // receive presence data from server\n\n  let listBy = (id, {metas: [first, ...rest]}) => {\n    first.count = rest.length + 1 // count of this user's presences\n    first.id = id\n    return first\n  }\n\n   presence.onSync(() => {\n     console.log(presence.list(listBy).map(user => presentUsers.push(user)))\n     this.setState({presenceState: presence.list(listBy)})\n   })\n\n    //let presences = {};\n\n    // channel.on('presence_diff', (diff) => {\n    //   presences = Presence.syncDiff(presences, diff);\n    //   this.setState({presences});\n    // });\n\n    // channel.on('presence_state', (state) => {\n    //   presences = Presence.syncDiff(presences, state);\n    //   this.setState({presenceState: presences});\n    // });\n\n    //channel.on('presence_state', presenceState => this.setState({presenceState}))\n\n    //let presence = new Presence(channel)\n\n    //presence.onSync(() => this.setState({presenceState: presence.state}))\n\n\n    //channel.push('users', {})\n  }\n\n  componentDidMount() {\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n    params: {user_id: `user #${this.props.usernumber}`}\n    });\n    this.setState({socket})\n  }\n\n  render() {\n\n    return (\n      <div className=\"User\">\n        <ShowCurrentActivity current={this.state.current}/>\n        <ChooseActivity join={this.joinRoom} message={this.sendMessage}/>\n        <ShowSimilarUsers users={this.state.presenceState}/>\n      </div>\n    );\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}