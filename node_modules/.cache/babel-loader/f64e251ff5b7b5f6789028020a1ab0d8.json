{"ast":null,"code":"var _jsxFileName = \"/Users/javierzapata/Developer/whatamidoing/src/Map/AltMap.js\";\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, Marker, withScriptjs } from \"react-google-maps\";\nimport { Socket } from 'phoenix-socket';\n\nconst Markers = ({\n  places\n}) => {\n  if (!places) {\n    console.log('huh');\n  }\n\n  return places.forEach((value, key) => {\n    return React.createElement(Marker, {\n      key: key,\n      position: {\n        lat: value.latitude,\n        lng: value.longitude\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n  });\n};\n\nconst GMap = ({\n  places,\n  zoom,\n  center\n}) => {\n  return React.createElement(GoogleMap, {\n    defaultZoom: zoom,\n    defaultCenter: center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Markers, {\n    places: places,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n}; // const getRandomInRange = (from, to, fixed) => {\n//   return (Math.random() * (to - from) + from).toFixed(fixed) * 1;\n// };\n\n\nclass MapWithMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      moreplaces: new Map(),\n      places: this.props.places\n    }; //initialize initial state from props\n  }\n\n  componentDidMount() {\n    //this.intervalId = setInterval(this.addPlace.bind(this), 1000);\n    var map = new Map();\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n      params: {\n        user_id: \"gpsmap\"\n      }\n    });\n    const channel = socket.channel(\"water_cooler:gps\");\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully \", resp);\n    }).receive(\"error\", resp => {\n      console.log(\"Unable to join\");\n    });\n    channel.on(\"gps\", payload => {\n      map.set(payload.user, payload.data);\n      console.log(map);\n      this.setState({\n        moreplaces: map\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return React.createElement(GMap, {\n      center: this.props.center,\n      zoom: this.props.zoom,\n      places: this.state.moreplaces,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default withScriptjs(withGoogleMap(MapWithMarker));","map":{"version":3,"sources":["/Users/javierzapata/Developer/whatamidoing/src/Map/AltMap.js"],"names":["React","withGoogleMap","GoogleMap","Marker","withScriptjs","Socket","Markers","places","console","log","forEach","value","key","lat","latitude","lng","longitude","GMap","zoom","center","MapWithMarker","Component","constructor","props","state","moreplaces","Map","componentDidMount","map","socket","params","user_id","channel","connect","join","receive","resp","on","payload","set","user","data","setState","componentWillUnmount","clearInterval","intervalId","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  withScriptjs\n} from \"react-google-maps\";\nimport { Socket } from 'phoenix-socket';\n\n\nconst Markers = ({ places }) => {\n  if (!places) {console.log('huh')}\n  return places.forEach((value, key) => {\n    return (\n      <Marker key={key} position={{ lat: value.latitude, lng: value.longitude }} />\n    );\n  });\n};\n\nconst GMap = ({ places, zoom, center }) => {\n  return (\n    <GoogleMap defaultZoom={zoom} defaultCenter={center}>\n      <Markers places={places} />\n    </GoogleMap>\n  );\n};\n\n// const getRandomInRange = (from, to, fixed) => {\n//   return (Math.random() * (to - from) + from).toFixed(fixed) * 1;\n// };\n\nclass MapWithMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      moreplaces: new Map(),\n      places: this.props.places\n    }; //initialize initial state from props\n  }\n\n\n\n  componentDidMount() {\n    //this.intervalId = setInterval(this.addPlace.bind(this), 1000);\n    var map = new Map();\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n    params: {user_id: \"gpsmap\"}\n    });\n    const channel = socket.channel(\"water_cooler:gps\");\n    socket.connect();\n    channel.join()\n    .receive(\"ok\", resp => {\n      console.log(\"Joined successfully \", resp)\n    })\n    .receive(\"error\", resp => { console.log(\"Unable to join\") })\n\n    channel.on(\"gps\", payload => {\n      map.set(payload.user,payload.data)\n      console.log(map)\n      this.setState({moreplaces: map})\n\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    return (\n      <GMap\n        center={this.props.center}\n        zoom={this.props.zoom}\n        places={this.state.moreplaces}\n      />\n    );\n  }\n}\n\nexport default withScriptjs(withGoogleMap(MapWithMarker));\n"]},"metadata":{},"sourceType":"module"}