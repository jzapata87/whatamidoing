{"ast":null,"code":"var _jsxFileName = \"/Users/javierzapata/Desktop/whatamidoing/src/Map/AltMap.js\";\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, Marker, withScriptjs } from \"react-google-maps\";\nimport { Socket } from 'phoenix-socket';\n\nconst _require = require(\"react-google-maps/lib/components/addons/MarkerWithLabel\"),\n      MarkerWithLabel = _require.MarkerWithLabel;\n\nconst Markers = ({\n  places\n}) => {\n  let arr = [];\n  places.forEach((value, key) => {\n    //console.log(value)\n    arr.push(React.createElement(Marker, {\n      key: key,\n      label: \"\".concat(key),\n      position: {\n        lat: value.latitude,\n        lng: value.longitude\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }));\n  });\n  return arr;\n};\n\nconst GMap = ({\n  places,\n  zoom,\n  center\n}) => {\n  return React.createElement(GoogleMap, {\n    defaultZoom: zoom,\n    defaultCenter: center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Markers, {\n    places: places,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n};\n\nclass MapWithMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: this.props.places,\n      channel: null\n    }; //initialize initial state from props\n  } // /phoenixmaybackend.com/socket\n\n\n  componentDidMount() {\n    const places = this.props.places;\n    var map = new Map(places);\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n      params: {\n        user_id: \"gpsmap\"\n      }\n    });\n    const channel = socket.channel(\"water_cooler:gps\");\n    socket.connect();\n    channel.join().receive(\"ok\", resp => {\n      console.log(\"Joined successfully \", resp);\n    }).receive(\"error\", resp => {\n      console.log(\"Unable to join\", resp);\n    });\n    this.setState({\n      channel: channel\n    });\n    channel.on(\"gps\", payload => {\n      map.set(payload.user, payload.data);\n      console.log(payload.user, \" \", payload.data, 'the payload data');\n      this.setState({\n        places: map\n      });\n    });\n  }\n\n  getNearestPoint() {\n    this.state.channel.push(\"nearest\").receive(\"ok\", resp => {\n      console.log(\"this is the nearest response \", console.log(resp)); //this.setState({nearest: resp})\n    }).receive(\"error\", resp => {\n      console.log(\"error nearest \", resp);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(GMap, {\n      center: this.props.center,\n      zoom: this.props.zoom,\n      places: this.state.places,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.getNearestPoint,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"GetNearestPoint\"));\n  }\n\n}\n\nexport default withScriptjs(withGoogleMap(MapWithMarker));","map":{"version":3,"sources":["/Users/javierzapata/Desktop/whatamidoing/src/Map/AltMap.js"],"names":["React","withGoogleMap","GoogleMap","Marker","withScriptjs","Socket","require","MarkerWithLabel","Markers","places","arr","forEach","value","key","push","lat","latitude","lng","longitude","GMap","zoom","center","MapWithMarker","Component","constructor","props","state","channel","componentDidMount","map","Map","socket","params","user_id","connect","join","receive","resp","console","log","setState","on","payload","set","user","data","getNearestPoint","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  withScriptjs\n} from \"react-google-maps\";\nimport { Socket } from 'phoenix-socket';\nconst { MarkerWithLabel } = require(\"react-google-maps/lib/components/addons/MarkerWithLabel\");\n\n\nconst Markers = ({ places }) => {\n  let arr = [];\n  places.forEach((value, key) => {\n    //console.log(value)\n    arr.push(\n      <Marker key={key} label={`${key}`} position={{ lat: value.latitude, lng: value.longitude }} />\n    );\n  });\n  return arr;\n};\n\nconst GMap = ({ places, zoom, center }) => {\n  return (\n    <GoogleMap defaultZoom={zoom} defaultCenter={center}>\n      <Markers places={places} />\n    </GoogleMap>\n  );\n};\n\nclass MapWithMarker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      places: this.props.places,\n      channel: null\n    }; //initialize initial state from props\n  }\n\n  // /phoenixmaybackend.com/socket\n  componentDidMount() {\n    const { places } = this.props\n    var map = new Map(places);\n    const socket = new Socket(\"ws://127.0.0.1:4000/socket\", {\n    params: {user_id: \"gpsmap\"}\n    });\n    const channel = socket.channel(\"water_cooler:gps\");\n\n    socket.connect();\n    channel.join()\n      .receive(\"ok\", resp => {\n        console.log(\"Joined successfully \", resp)\n      })\n      .receive(\"error\", resp => { console.log(\"Unable to join\", resp) })\n\n    this.setState({channel: channel})\n\n    channel.on(\"gps\", payload => {\n      map.set(payload.user,payload.data)\n      console.log(payload.user, \" \", payload.data,'the payload data')\n      this.setState({places: map})\n\n    })\n  }\n\n  getNearestPoint() {\n    this.state.channel.push(\"nearest\")\n      .receive(\"ok\", resp => {\n        console.log(\"this is the nearest response \", console.log(resp))\n        //this.setState({nearest: resp})\n      })\n      .receive(\"error\", resp => { console.log(\"error nearest \", resp) })\n  }\n\n  render() {\n    return (\n      <>\n      <GMap\n        center={this.props.center}\n        zoom={this.props.zoom}\n        places={this.state.places}\n      />\n      <button onClick={this.getNearestPoint}>\n        GetNearestPoint\n      </button>\n    </>\n    );\n  }\n}\n\nexport default withScriptjs(withGoogleMap(MapWithMarker));\n"]},"metadata":{},"sourceType":"module"}